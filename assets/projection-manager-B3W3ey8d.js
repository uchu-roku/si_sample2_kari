import{p as b}from"./index-CP7HoFr0.js";import{r as u,d as y,E as x}from"./index-Bmj_S0sl.js";async function j(){return new Promise(n=>{const t=G("座標系が不明です",`
      <p style="margin:6px 0 10px">シェープの座標系を選んでください（P1では 4326/3857 のみサポート）。</p>
      <label><input type="radio" name="crs" value="EPSG:4326" checked> WGS84（EPSG:4326）</label><br>
      <label><input type="radio" name="crs" value="EPSG:3857"> Web Mercator（EPSG:3857）</label><br>
      <div style="margin-top:10px; display:flex; gap:8px; justify-content:flex-end">
        <button data-act="cancel">キャンセル</button>
        <button data-act="ok">OK</button>
      </div>
    `);t.querySelector('[data-act="cancel"]').onclick=()=>{d(t),n(null)},t.querySelector('[data-act="ok"]').onclick=()=>{const e=t.querySelector('input[name="crs"]:checked')?.value;d(t),n({from:e})}})}async function _({suggestion:n}={}){return new Promise(t=>{const e=G("GeoTIFFの位置情報が不足しています",`
      <p style="margin:6px 0 10px">座標系を選ぶか、World File（.tfw）を追加してください。</p>
      <label><input type="radio" name="crs" value="EPSG:4326" ${n==="4326"?"checked":""}> WGS84（EPSG:4326）</label><br>
      <label><input type="radio" name="crs" value="EPSG:3857" ${n==="3857"?"checked":""}> Web Mercator（EPSG:3857）</label><br>
      <div style="margin:8px 0 6px">
        <input type="file" accept=".tfw,.wld" id="tfwInput">
      </div>
      <div style="margin-top:10px; display:flex; gap:8px; justify-content:flex-end">
        <button data-act="cancel">キャンセル</button>
        <button data-act="ok">OK</button>
      </div>
    `);e.querySelector('[data-act="cancel"]').onclick=()=>{d(e),t(null)},e.querySelector('[data-act="ok"]').onclick=async()=>{const o=e.querySelector('input[name="crs"]:checked')?.value||"EPSG:4326",r=e.querySelector("#tfwInput")?.files?.[0]||null,c=r?await r.text():null;d(e),t({crs:o,tfw:c})}})}function G(n,t){const e=document.createElement("div");e.style.cssText="position:fixed;inset:0;z-index:3000;background:rgba(0,0,0,.35);display:flex;align-items:center;justify-content:center";const o=document.createElement("div");return o.style.cssText="width:min(520px,90vw);background:#fff;border-radius:10px;box-shadow:0 12px 28px rgba(0,0,0,.2);padding:12px 14px;font:13px/1.5 system-ui",o.innerHTML=`<div style="font-weight:700;margin-bottom:6px">${n}</div><div>${t}</div>`,e.appendChild(o),document.body.appendChild(e),e}function d(n){try{document.body.removeChild(n)}catch{}}const S=6378137,P=n=>n/S*180/Math.PI,h=n=>180/Math.PI*Math.atan(Math.sinh(n/S));function E(n){const t=Number(n?.ProjectedCSTypeGeoKey??n?.GeographicTypeGeoKey??0),e=String(n?.PCSCitationGeoKey??n?.GTCitationGeoKey??"").toLowerCase(),o=/web[_ ]?mercator.*auxiliary/.test(e);return t===32767&&o?3857:t||null}function v(n,{onUnknownCrs:t="warn"}={}){const e=n.getGeoKeys?.()||{},o=E(e),[r,c,a,i]=n.getBoundingBox();if(o===4326){const s=[[c,r],[i,a]];return u({phase:"crs-detect",finalCrs:4326,bbox:[r,c,a,i],bounds:s},"ok"),s}if(o===3857){const s=[[h(c),P(r)],[h(i),P(a)]];return u({phase:"crs-detect",finalCrs:3857,bbox:[r,c,a,i],bounds:s},"ok"),s}const p=()=>u?u(y?.(x.GEO_RENDER,"Unknown/unsupported CRS for bounds",{keys:e}),"warn"):console.warn("Unknown/unsupported CRS for bounds",e);if(t==="throw")throw y?.(x.GEO_RENDER,"Unknown/unsupported CRS for bounds",{keys:e});return t==="warn"&&p(),null}const l={"EPSG:4326":"+proj=longlat +datum=WGS84 +no_defs","EPSG:3857":"+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs","EPSG:3031":"+proj=stere +lat_0=-90 +lat_ts=-71 +lon_0=0 +k=1 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs","EPSG:3413":"+proj=stere +lat_0=90 +lat_ts=70 +lon_0=-45 +k=1 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs"};class C{constructor(){Object.keys(l).forEach(t=>{b.defs(t,l[t])}),this.mapProjection="EPSG:3857"}getProjectionFromGeoKeys(t){if(!t)return null;if(t.ProjectedCSTypeGeoKey){const e=t.ProjectedCSTypeGeoKey;if(e===3857)return"EPSG:3857";if(e===32600)return"EPSG:32600"}return t.GeographicTypeGeoKey&&t.GeographicTypeGeoKey===4326?"EPSG:4326":null}getProj4Definition(t){if(!t)return null;if(l[t])return l[t];try{return b.defs(t)}catch{return console.warn(`投影法 ${t} の定義が見つかりません`),null}}transformCoordinates(t,e,o){if(!e||!o)return null;if(e===o)return t;try{const r=this.getProj4Definition(e),c=this.getProj4Definition(o);return!r||!c?null:b(r,c,t)}catch(r){return console.error("座標変換エラー:",r),null}}adjustProjection(t){const{geoKeys:e,bbox:o}=t,r=this.getProjectionFromGeoKeys(e);console.log("ソース投影法:",r);const c=r||"EPSG:4326";if(c===this.mapProjection)return console.log("投影法は一致しています。変換は不要です。"),t;console.log(`投影法を ${c} から ${this.mapProjection} に変換します`);try{const[a,i,p,s]=o,m=this.transformCoordinates([a,i],c,this.mapProjection),f=this.transformCoordinates([p,s],c,this.mapProjection);if(!m||!f)throw new Error("座標変換に失敗しました");const w=[m[0],m[1],f[0],f[1]];return{...t,originalBbox:o,bbox:w,originalProjection:c,targetProjection:this.mapProjection}}catch(a){return console.error("投影調整エラー:",a),t}}setMapProjection(t){l[t]?(this.mapProjection=t,console.log(`マップの投影法を ${t} に設定しました`)):console.warn(`不明な投影法: ${t}`)}}export{C as ProjectionManager,S as R,E as detectCrsFromKeys,_ as ensureRasterCRSUI,j as ensureVectorCRSUI,v as latLngBoundsFromImage,P as mercX2Lon,h as mercY2Lat};
//# sourceMappingURL=projection-manager-B3W3ey8d.js.map
