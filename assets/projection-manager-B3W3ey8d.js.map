{"version":3,"file":"projection-manager-B3W3ey8d.js","sources":["../../src/projection-manager.js"],"sourcesContent":["import proj4 from 'proj4';\r\nimport L from 'leaflet';\r\nimport { report, raise, ERR } from './errors.js';\r\n\r\n// ====== P1 追加：軽量UIで 4326/3857/.prj/.tfw を選択 ======\r\nexport async function ensureVectorCRSUI() {\r\n  return new Promise((resolve) => {\r\n    const box = makeBox('座標系が不明です', `\r\n      <p style=\"margin:6px 0 10px\">シェープの座標系を選んでください（P1では 4326/3857 のみサポート）。</p>\r\n      <label><input type=\"radio\" name=\"crs\" value=\"EPSG:4326\" checked> WGS84（EPSG:4326）</label><br>\r\n      <label><input type=\"radio\" name=\"crs\" value=\"EPSG:3857\"> Web Mercator（EPSG:3857）</label><br>\r\n      <div style=\"margin-top:10px; display:flex; gap:8px; justify-content:flex-end\">\r\n        <button data-act=\"cancel\">キャンセル</button>\r\n        <button data-act=\"ok\">OK</button>\r\n      </div>\r\n    `);\r\n    box.querySelector('[data-act=\"cancel\"]').onclick = () => { close(box); resolve(null); };\r\n    box.querySelector('[data-act=\"ok\"]').onclick = () => {\r\n      const val = box.querySelector('input[name=\"crs\"]:checked')?.value;\r\n      close(box); resolve({ from: val });\r\n    };\r\n  });\r\n}\r\n\r\n// Raster 用：bbox は取れたが CRS が不明、または bbox が無い時（TFW 併用）\r\nexport async function ensureRasterCRSUI({ suggestion } = {}) {\r\n  return new Promise((resolve) => {\r\n    const box = makeBox('GeoTIFFの位置情報が不足しています', `\r\n      <p style=\"margin:6px 0 10px\">座標系を選ぶか、World File（.tfw）を追加してください。</p>\r\n      <label><input type=\"radio\" name=\"crs\" value=\"EPSG:4326\" ${suggestion==='4326'?'checked':''}> WGS84（EPSG:4326）</label><br>\r\n      <label><input type=\"radio\" name=\"crs\" value=\"EPSG:3857\" ${suggestion==='3857'?'checked':''}> Web Mercator（EPSG:3857）</label><br>\r\n      <div style=\"margin:8px 0 6px\">\r\n        <input type=\"file\" accept=\".tfw,.wld\" id=\"tfwInput\">\r\n      </div>\r\n      <div style=\"margin-top:10px; display:flex; gap:8px; justify-content:flex-end\">\r\n        <button data-act=\"cancel\">キャンセル</button>\r\n        <button data-act=\"ok\">OK</button>\r\n      </div>\r\n    `);\r\n    box.querySelector('[data-act=\"cancel\"]').onclick = () => { close(box); resolve(null); };\r\n    box.querySelector('[data-act=\"ok\"]').onclick = async () => {\r\n      const val = box.querySelector('input[name=\"crs\"]:checked')?.value || 'EPSG:4326';\r\n      const tfwFile = box.querySelector('#tfwInput')?.files?.[0] || null;\r\n      const tfw = tfwFile ? await tfwFile.text() : null;\r\n      close(box); resolve({ crs: val, tfw });\r\n    };\r\n  });\r\n}\r\n\r\nfunction makeBox(title, html) {\r\n  const wrap = document.createElement('div');\r\n  wrap.style.cssText = 'position:fixed;inset:0;z-index:3000;background:rgba(0,0,0,.35);display:flex;align-items:center;justify-content:center';\r\n  const box = document.createElement('div');\r\n  box.style.cssText = 'width:min(520px,90vw);background:#fff;border-radius:10px;box-shadow:0 12px 28px rgba(0,0,0,.2);padding:12px 14px;font:13px/1.5 system-ui';\r\n  box.innerHTML = `<div style=\"font-weight:700;margin-bottom:6px\">${title}</div><div>${html}</div>`;\r\n  wrap.appendChild(box);\r\n  document.body.appendChild(wrap);\r\n  return wrap;\r\n}\r\nfunction close(wrap){ try{ document.body.removeChild(wrap);}catch{} }\r\n\r\n// ---- 3857 <-> 4326 の相互変換（Web Mercator 専用）----\r\nexport const R = 6378137;\r\nexport const mercX2Lon = x => (x / R) * 180 / Math.PI;\r\nexport const mercY2Lat = y => (180 / Math.PI) * Math.atan(Math.sinh(y / R));\r\n\r\nexport function detectCrsFromKeys(keys) {\r\n  const epsg = Number(keys?.ProjectedCSTypeGeoKey ?? keys?.GeographicTypeGeoKey ?? 0);\r\n  const cite = String(keys?.PCSCitationGeoKey ?? keys?.GTCitationGeoKey ?? '').toLowerCase();\r\n  const isEsriWebMerc = /web[_ ]?mercator.*auxiliary/.test(cite);\r\n  if (epsg === 32767 && isEsriWebMerc) return 3857; // EPSG 無しでも WebMerc 記述があれば 3857 扱い\r\n  return epsg || null; // 0/undefined → null\r\n}\r\n\r\n/**\r\n * GeoTIFF Image から Leaflet 用の LatLngBounds を返す。\r\n * 4326 / 3857 を自動判定。未知CRSなら null を返す（警告ログあり）。\r\n */\r\nexport function latLngBoundsFromImage(img, { onUnknownCrs = 'warn' } = {}) {\r\n  const keys = img.getGeoKeys?.() || {};\r\n  const crs  = detectCrsFromKeys(keys);\r\n  const [minX, minY, maxX, maxY] = img.getBoundingBox();\r\n\r\n  if (crs === 4326) {\r\n    const b = [[minY, minX], [maxY, maxX]];\r\n    report({ phase:'crs-detect', finalCrs: 4326, bbox: [minX,minY,maxX,maxY], bounds: b }, 'ok');\r\n    return b;\r\n  }\r\n  if (crs === 3857) {\r\n    const b = [[mercY2Lat(minY), mercX2Lon(minX)], [mercY2Lat(maxY), mercX2Lon(maxX)]];\r\n    report({ phase:'crs-detect', finalCrs: 3857, bbox: [minX,minY,maxX,maxY], bounds: b }, 'ok');\r\n    return b;\r\n  }\r\n\r\n  // 未対応CRS\r\n  const warn = () => report\r\n    ? report(raise?.(ERR.GEO_RENDER, 'Unknown/unsupported CRS for bounds', { keys }), 'warn')\r\n    : console.warn('Unknown/unsupported CRS for bounds', keys);\r\n\r\n  if (onUnknownCrs === 'throw') {\r\n    throw raise?.(ERR.GEO_RENDER, 'Unknown/unsupported CRS for bounds', { keys });\r\n  }\r\n  if (onUnknownCrs === 'warn') warn();\r\n  return null;\r\n}\r\n\r\n// 一般的な投影法の定義\r\nconst commonProjections = {\r\n  'EPSG:4326': '+proj=longlat +datum=WGS84 +no_defs',\r\n  'EPSG:3857': '+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs',\r\n  'EPSG:3031': '+proj=stere +lat_0=-90 +lat_ts=-71 +lon_0=0 +k=1 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs',\r\n  'EPSG:3413': '+proj=stere +lat_0=90 +lat_ts=70 +lon_0=-45 +k=1 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs'\r\n};\r\n\r\n/**\r\n * 投影管理クラス\r\n */\r\nexport class ProjectionManager {\r\n  constructor() {\r\n    // Proj4の初期化\r\n    Object.keys(commonProjections).forEach(epsg => {\r\n      proj4.defs(epsg, commonProjections[epsg]);\r\n    });\r\n    \r\n    // マップのデフォルト投影法（EPSG:3857）\r\n    this.mapProjection = 'EPSG:3857';\r\n  }\r\n  \r\n  /**\r\n   * GeoTIFFの投影情報を取得\r\n   * @param {Object} geoKeys - GeoTIFFのGeoKeys\r\n   * @returns {string|null} 投影コード\r\n   */\r\n  getProjectionFromGeoKeys(geoKeys) {\r\n    if (!geoKeys) return null;\r\n    \r\n    // GeoKeysから投影情報を抽出\r\n    if (geoKeys.ProjectedCSTypeGeoKey) {\r\n      const code = geoKeys.ProjectedCSTypeGeoKey;\r\n      if (code === 3857) return 'EPSG:3857';\r\n      if (code === 32600) return 'EPSG:32600'; // UTM Zone 0\r\n      // 他のコードも必要に応じて追加\r\n    }\r\n    \r\n    if (geoKeys.GeographicTypeGeoKey) {\r\n      const code = geoKeys.GeographicTypeGeoKey;\r\n      if (code === 4326) return 'EPSG:4326';\r\n    }\r\n    \r\n    return null;\r\n  }\r\n  \r\n  /**\r\n   * 投影コードをProj4定義に変換\r\n   * @param {string} projectionCode - 投影コード\r\n   * @returns {string|null} Proj4定義\r\n   */\r\n  getProj4Definition(projectionCode) {\r\n    if (!projectionCode) return null;\r\n    \r\n    // 既知の投影法\r\n    if (commonProjections[projectionCode]) {\r\n      return commonProjections[projectionCode];\r\n    }\r\n    \r\n    // Proj4に既に登録されている投影法\r\n    try {\r\n      return proj4.defs(projectionCode);\r\n    } catch (error) {\r\n      console.warn(`投影法 ${projectionCode} の定義が見つかりません`);\r\n      return null;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 座標を変換\r\n   * @param {Array} coordinates - [x, y] 座標\r\n   * @param {string} sourceProjection - 元の投影法\r\n   * @param {string} targetProjection - 変換先の投影法\r\n   * @returns {Array|null} 変換された座標\r\n   */\r\n  transformCoordinates(coordinates, sourceProjection, targetProjection) {\r\n    if (!sourceProjection || !targetProjection) return null;\r\n    if (sourceProjection === targetProjection) return coordinates;\r\n    \r\n    try {\r\n      const sourceDef = this.getProj4Definition(sourceProjection);\r\n      const targetDef = this.getProj4Definition(targetProjection);\r\n      \r\n      if (!sourceDef || !targetDef) return null;\r\n      \r\n      return proj4(sourceDef, targetDef, coordinates);\r\n    } catch (error) {\r\n      console.error('座標変換エラー:', error);\r\n      return null;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * GeoTIFFデータの投影を調整\r\n   * @param {Object} geoTiffData - GeoTIFFデータ\r\n   * @returns {Object} 投影調整済みデータ\r\n   */\r\n  adjustProjection(geoTiffData) {\r\n    const { geoKeys, bbox } = geoTiffData;\r\n    \r\n    // GeoKeysから投影情報を取得\r\n    const sourceProjection = this.getProjectionFromGeoKeys(geoKeys);\r\n    console.log('ソース投影法:', sourceProjection);\r\n    \r\n    // 投影情報がなければデフォルトを使用\r\n    const sourceProj = sourceProjection || 'EPSG:4326';\r\n    \r\n    // 同一投影法なら変換不要\r\n    if (sourceProj === this.mapProjection) {\r\n      console.log('投影法は一致しています。変換は不要です。');\r\n      return geoTiffData;\r\n    }\r\n    \r\n    console.log(`投影法を ${sourceProj} から ${this.mapProjection} に変換します`);\r\n    \r\n    try {\r\n      // バウンディングボックスの変換\r\n      const [minX, minY, maxX, maxY] = bbox;\r\n      \r\n      // 四隅の座標を変換\r\n      const sw = this.transformCoordinates([minX, minY], sourceProj, this.mapProjection);\r\n      const ne = this.transformCoordinates([maxX, maxY], sourceProj, this.mapProjection);\r\n      \r\n      if (!sw || !ne) {\r\n        throw new Error('座標変換に失敗しました');\r\n      }\r\n      \r\n      // 変換後のバウンディングボックス\r\n      const transformedBbox = [sw[0], sw[1], ne[0], ne[1]];\r\n      \r\n      // 変換済みデータを返す\r\n      return {\r\n        ...geoTiffData,\r\n        originalBbox: bbox,\r\n        bbox: transformedBbox,\r\n        originalProjection: sourceProj,\r\n        targetProjection: this.mapProjection\r\n      };\r\n    } catch (error) {\r\n      console.error('投影調整エラー:', error);\r\n      // エラーの場合、元のデータを返す\r\n      return geoTiffData;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * マップの投影法を設定\r\n   * @param {string} projection - 投影法コード\r\n   */\r\n  setMapProjection(projection) {\r\n    if (commonProjections[projection]) {\r\n      this.mapProjection = projection;\r\n      console.log(`マップの投影法を ${projection} に設定しました`);\r\n    } else {\r\n      console.warn(`不明な投影法: ${projection}`);\r\n    }\r\n  }\r\n}"],"names":["ensureVectorCRSUI","resolve","box","makeBox","close","val","ensureRasterCRSUI","suggestion","tfwFile","tfw","title","html","wrap","R","mercX2Lon","x","mercY2Lat","y","detectCrsFromKeys","keys","epsg","cite","isEsriWebMerc","latLngBoundsFromImage","img","onUnknownCrs","crs","minX","minY","maxX","maxY","b","report","warn","raise","ERR","commonProjections","ProjectionManager","proj4","geoKeys","code","projectionCode","coordinates","sourceProjection","targetProjection","sourceDef","targetDef","error","geoTiffData","bbox","sourceProj","sw","ne","transformedBbox","projection"],"mappings":"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"}